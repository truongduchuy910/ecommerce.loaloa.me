{"version":3,"file":"static/webpack/static/development/pages/index.js.29ab087bb55b5fc945ae.hot-update.js","sources":["webpack:///./components/orders.js"],"sourcesContent":["import Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { useState, useEffect } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport Order from \"./Order\";\nconst query = gql`\n  query($limit: Int, $skip: Int) {\n    allOrders(orderBy: \"step_DESC\", first: $limit, skip: $skip) {\n      id\n      time\n      customer {\n        id\n        name\n        phone\n        address\n      }\n      step\n      items {\n        id\n        price\n        product {\n          id\n          name\n          price\n          sale\n          image {\n            publicUrl\n          }\n          images {\n            file {\n              publicUrl\n            }\n          }\n        }\n        quantity\n        attributes {\n          name\n        }\n      }\n    }\n  }\n`;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    maxWidth: 350,\n  },\n}));\nexport default function orders({ newOrder, setNewOrder }) {\n  const classes = useStyles();\n  const [moreResult, setMore] = useState(true);\n  const [newKQ, setNewKQ] = useState();\n  let { data, loading, error, fetchMore, refetch } = useQuery(query, {\n    variables: { limit: 1, skip: 0 },\n  });\n  let allOrders = data?.allOrders;\n\n  if (newOrder && !newKQ) {\n    setNewKQ(newOrder);\n    setNewOrder(false);\n    refetch();\n  }\n\n  function loadingMore() {\n    let count = data?.allOrders.length;\n    fetchMore({\n      variables: {\n        limit: 1,\n        skip: count,\n      },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          setMore(false);\n          return prev;\n        }\n        return Object.assign({}, prev, {\n          allOrders: [...prev.allOrders, ...fetchMoreResult.allOrders],\n        });\n      },\n    });\n  }\n\n  return !loading ? (\n    <Grid container spacing={1}>\n      {allOrders?.length ? (\n        allOrders?.map((order) => (\n          <Grid item xs={12} key={order.id}>\n            <Order order={order} nextStep={() => refetch()} />\n          </Grid>\n        ))\n      ) : (\n        <Typography variant=\"body1\">Danh sách kết quả trỗng.</Typography>\n      )}\n\n      <Grid item xs={6} md={3} lg={2}>\n        {moreResult && allOrders?.length ? (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            onClick={loadingMore}\n          >\n            Xem thêm\n          </Button>\n        ) : null}\n      </Grid>\n    </Grid>\n  ) : (\n    <Skeleton animation=\"wave\" variant=\"rect\" height=\"60vh\" />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAqCA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAAA;AAaA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AADA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAbA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;A","sourceRoot":""}
{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport Cung from \"./cung\";\nimport CungVi from \"./cungVi\";\nimport AllChinhTinhs from \"./chinhTinhs\";\nimport AllPhuTinhs from \"./phuTinhs\";\nimport { layCung } from \"../lib/laSoAdapter\";\nimport { getErrorMessage } from \"../lib/form\";\nconst createKetQuaMutation = gql`\n  mutation(\n    $cung: CungWhereUniqueInput\n    $cungVi: CungViWhereUniqueInput\n    $chinhTinhs: [TinhWhereUniqueInput]\n    $phuTinhs: [PhuTinhWhereUniqueInput]\n  ) {\n    createKetQua(\n      data: {\n        cung: { connect: $cung }\n        cungVi: { connect: $cungVi }\n        chinhTinh: { connect: $chinhTinhs, disconnectAll: true }\n        phuTinh: { connect: $phuTinhs, disconnectAll: true }\n      }\n    ) {\n      id\n      cung {\n        name\n      }\n      loiGiais: ketQua {\n        id\n        cung {\n          name\n        }\n        chinhTinh {\n          id\n          name\n        }\n        phuTinh {\n          id\n          name\n        }\n        giai\n      }\n    }\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(1),\n    marginBottom: theme.spacing(2)\n  }\n}));\n\nconst createKetQuas = ({\n  laSoTuVi,\n  onCreate\n}) => {\n  const [createKetQua] = useMutation(createKetQuaMutation);\n  const router = useRouter(); //\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // alert\n\n  const [alertOpen, setAlertOpen] = React.useState(false);\n  const [alertMessage, setAlertMessage] = React.useState(\"\"); // autocomplete\n\n  const {\n    0: autocomplete,\n    1: setAuto\n  } = useState(true);\n  const {\n    0: autoEnable,\n    1: setAutoEnable\n  } = useState(false); // autocomplete = true data from \"laSoTuVi\"\n\n  const {\n    0: DX,\n    1: setDX\n  } = useState();\n  const {\n    0: T1,\n    1: setT1\n  } = useState();\n  const {\n    0: T2,\n    1: setT2\n  } = useState();\n  const {\n    0: XC,\n    1: setXC\n  } = useState(); // // autocomplete = false data from child state\n\n  const {\n    0: C,\n    1: setC\n  } = useState();\n  const {\n    0: CV,\n    1: setCV\n  } = useState();\n  const {\n    0: CT,\n    1: setCT\n  } = useState([]);\n  const {\n    0: PT,\n    1: setPT\n  } = useState([]);\n  const {\n    0: PTT1,\n    1: setPTT1\n  } = useState([]);\n  const {\n    0: PTT2,\n    1: setPTT2\n  } = useState([]);\n  const {\n    0: PTXC,\n    1: setPTXC\n  } = useState([]);\n  useEffect(() => {\n    setAutoEnable(Boolean(laSoTuVi));\n  });\n\n  function handleCungChange(cung) {\n    setC(cung);\n\n    if (cung && laSoTuVi && autocomplete) {\n      let {\n        DX,\n        T1,\n        T2,\n        XC\n      } = layCung({\n        cung,\n        thapNhiCung: laSoTuVi.thapNhiCung\n      });\n      setDX(DX);\n      setT1(T1);\n      setT2(T2);\n      setXC(XC);\n    }\n  }\n\n  function handleChangeCheckBox(event) {\n    setAuto(event.target.checked);\n  }\n\n  async function handleSubmit() {\n    setLoading(true);\n    const variables = {\n      cung: {\n        id: C === null || C === void 0 ? void 0 : C.id\n      },\n      cungVi: {\n        id: CV === null || CV === void 0 ? void 0 : CV.id\n      },\n      chinhTinhs: WhereUniqueInput(CT),\n      phuTinhs: WhereUniqueInput(PT.concat(PTT1).concat(PTT2).concat(PTXC))\n    };\n\n    try {\n      const {\n        data\n      } = await createKetQua({\n        variables\n      });\n      onCreate(data === null || data === void 0 ? void 0 : data.createKetQua);\n      setLoading(false);\n    } catch (error) {\n      setAlertMessage(getErrorMessage(error));\n      setAlertOpen(true);\n      setLoading(false);\n      await router.push(\"/\");\n    }\n  }\n\n  const alertClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setAlertOpen(false);\n  };\n\n  const classes = useStyles();\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Cung, {\n    onChange: handleCungChange\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(CungVi, {\n    cung: autocomplete ? DX : false,\n    setCung: setDX,\n    CV: CV,\n    setCV: setCV\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllChinhTinhs, {\n    cung: autocomplete ? DX : false,\n    setCung: setDX,\n    CT: CT,\n    setCT: setCT\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    cung: DX,\n    setCung: setDX,\n    PT: PT,\n    setPT: setPT\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    label: T1 ? \"Tam hợp \" + T1.cungChu : false,\n    cung: autocomplete ? T1 : false,\n    setCung: setT1,\n    PT: PTT1,\n    setPT: setPTT1\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    label: T2 ? \"Tam hợp \" + T2.cungChu : false,\n    cung: autocomplete ? T2 : false,\n    setCung: setT2,\n    PT: PTT2,\n    setPT: setPTT2\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    label: XC ? \"Xung chiếu \" + XC.cungChu : false,\n    cung: autocomplete ? XC : false,\n    setCung: setXC,\n    PT: PTXC,\n    setPT: setPTXC\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      disabled: !autoEnable,\n      checked: autocomplete,\n      onChange: handleChangeCheckBox,\n      name: \"checkedB\",\n      color: \"primary\"\n    }),\n    label: \"T\\u1EF1 \\u0111\\u1ED9ng \\u0111i\\u1EC1n t\\u1EEB l\\xE1 s\\xF4?\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleSubmit\n  }, loading ? __jsx(React.Fragment, null, __jsx(CircularProgress, {\n    size: 24.5,\n    color: \"secondary\",\n    style: {\n      marginRight: 15\n    }\n  }), \" \", \"Vui l\\xF2ng \\u0111\\u1EE3i\") : \"Xem Kết Quả\"))), __jsx(Snackbar, {\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: alertOpen,\n    onClose: alertClose,\n    autoHideDuration: 3000,\n    message: alertMessage\n  }));\n};\n\nexport default createKetQuas;\n\nfunction WhereUniqueInput(array) {\n  if (!array) return [];\n  let result = [];\n  array.map(item => result.push({\n    id: item.id\n  }));\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/huy/apps/tuvilogic/app/components/cungVi.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    allCungVis {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layCungVi } from \"../lib/laSoAdapter\";\nvar query = gql(_templateObject());\nexport default function cungVi(_ref) {\n  _s();\n\n  var _this = this;\n\n  var cung = _ref.cung,\n      autocomplete = _ref.autocomplete,\n      _onChange = _ref.onChange;\n\n  var _useState = useState(),\n      cungVi = _useState[0],\n      setCungVi = _useState[1];\n\n  var _useQuery = useQuery(query),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var shouldRedirect = !(loading || data);\n  var router = useRouter();\n  useEffect(function () {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n  }, [shouldRedirect]);\n  var CV;\n\n  if ((data === null || data === void 0 ? void 0 : data.allCungVis) && cung && autocomplete) {\n    CV = layCungVi({\n      cung: cung,\n      allCungVis: data.allCungVis\n    }).CV;\n  }\n\n  return (data === null || data === void 0 ? void 0 : data.allCungVis) && !loading ? __jsx(Autocomplete, {\n    value: autocomplete ? CV : cungVi,\n    onChange: function onChange(event, value) {\n      _onChange(value);\n\n      setCungVi(value);\n    },\n    size: \"small\",\n    options: data === null || data === void 0 ? void 0 : data.allCungVis,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    filterSelectedOptions: true,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        variant: \"outlined\",\n        label: \"Cung V\\u1ECB\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }) : __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(cungVi, \"nB5A+GAntTEQr7aRda/swvE8nnI=\", false, function () {\n  return [useQuery, useRouter];\n});","map":{"version":3,"sources":["/home/huy/apps/tuvilogic/app/components/cungVi.js"],"names":["TextField","Autocomplete","Skeleton","useState","useEffect","useRouter","gql","useQuery","layCungVi","query","cungVi","cung","autocomplete","onChange","setCungVi","data","loading","error","shouldRedirect","router","push","CV","allCungVis","event","value","option","name","params"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,IAAMC,KAAK,GAAGH,GAAH,mBAAX;AAQA,eAAe,SAASI,MAAT,OAAkD;AAAA;;AAAA;;AAAA,MAAhCC,IAAgC,QAAhCA,IAAgC;AAAA,MAA1BC,YAA0B,QAA1BA,YAA0B;AAAA,MAAZC,SAAY,QAAZA,QAAY;;AAAA,kBACnCV,QAAQ,EAD2B;AAAA,MACxDO,MADwD;AAAA,MAChDI,SADgD;;AAAA,kBAG9BP,QAAQ,CAACE,KAAD,CAHsB;AAAA,MAGvDM,IAHuD,aAGvDA,IAHuD;AAAA,MAGjDC,OAHiD,aAGjDA,OAHiD;AAAA,MAGxCC,KAHwC,aAGxCA,KAHwC;;AAK/D,MAAMC,cAAc,GAAG,EAAEF,OAAO,IAAID,IAAb,CAAvB;AACA,MAAMI,MAAM,GAAGd,SAAS,EAAxB;AACAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,cAAJ,EAAoB;AAClBC,MAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ;AACD;AACF,GAJQ,EAIN,CAACF,cAAD,CAJM,CAAT;AAKA,MAAIG,EAAJ;;AACA,MAAI,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEO,UAAN,KAAoBX,IAApB,IAA4BC,YAAhC,EAA8C;AAC5CS,IAAAA,EAAE,GAAGb,SAAS,CAAC;AAAEG,MAAAA,IAAI,EAAJA,IAAF;AAAQW,MAAAA,UAAU,EAAEP,IAAI,CAACO;AAAzB,KAAD,CAAT,CAAiDD,EAAtD;AACD;;AACD,SAAO,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEO,UAAN,KAAoB,CAACN,OAArB,GACL,MAAC,YAAD;AACE,IAAA,KAAK,EAAEJ,YAAY,GAAGS,EAAH,GAAQX,MAD7B;AAEE,IAAA,QAAQ,EAAE,kBAACa,KAAD,EAAQC,KAAR,EAAkB;AAC1BX,MAAAA,SAAQ,CAACW,KAAD,CAAR;;AACAV,MAAAA,SAAS,CAACU,KAAD,CAAT;AACD,KALH;AAME,IAAA,IAAI,EAAC,OANP;AAOE,IAAA,OAAO,EAAET,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEO,UAPjB;AAQE,IAAA,cAAc,EAAE,wBAACG,MAAD,EAAY;AAC1B,aAAOA,MAAM,CAACC,IAAd;AACD,KAVH;AAWE,IAAA,qBAAqB,MAXvB;AAYE,IAAA,WAAW,EAAE,qBAACC,MAAD;AAAA,aACX,MAAC,SAAD,eAAeA,MAAf;AAAuB,QAAA,OAAO,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAC,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADW;AAAA,KAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAkBL,MAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,MAAM,EAAE,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF;AAoBD;;GApCuBjB,M;UAGWH,Q,EAGlBF,S","sourcesContent":["import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layCungVi } from \"../lib/laSoAdapter\";\nconst query = gql`\n  query {\n    allCungVis {\n      id\n      name\n    }\n  }\n`;\nexport default function cungVi({ cung, autocomplete, onChange }) {\n  const [cungVi, setCungVi] = useState();\n\n  const { data, loading, error } = useQuery(query);\n\n  const shouldRedirect = !(loading || data);\n  const router = useRouter();\n  useEffect(() => {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n  }, [shouldRedirect]);\n  let CV;\n  if (data?.allCungVis && cung && autocomplete) {\n    CV = layCungVi({ cung, allCungVis: data.allCungVis }).CV;\n  }\n  return data?.allCungVis && !loading ? (\n    <Autocomplete\n      value={autocomplete ? CV : cungVi}\n      onChange={(event, value) => {\n        onChange(value);\n        setCungVi(value);\n      }}\n      size=\"small\"\n      options={data?.allCungVis}\n      getOptionLabel={(option) => {\n        return option.name;\n      }}\n      filterSelectedOptions\n      renderInput={(params) => (\n        <TextField {...params} variant=\"outlined\" label=\"Cung Vá»‹\" />\n      )}\n    />\n  ) : (\n    <Skeleton variant=\"rect\" height={40} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
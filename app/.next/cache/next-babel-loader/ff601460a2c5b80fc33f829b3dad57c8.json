{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/huy/apps/ecommerce/app/components/Attribute/listOne.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($seller: UserWhereInput) {\\n    allAttributes(where: { seller: $seller }) {\\n      id\\n      name\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// show in product detail\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./itemOne\";\nimport { Fragment } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Link } from \"../src/Link\";\nimport { queryVar } from \"../../apollo/action\";\nimport { page } from \"../../config/index\";\nimport { Spinner, Alert } from \"reactstrap\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nvar GET_ATTRIBUTES = gql(_templateObject());\nexport function List(_ref) {\n  var attributes = _ref.attributes;\n\n  var _useQuery = useQuery(GET_ATTRIBUTES, {\n    variables: {\n      seller: page.seller\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return __jsx(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  });\n  if (error) return __jsx(\"i\", {\n    color: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, getErrorMessage(error));\n  var source = attributes ? attributes : data.allAttributes;\n  return !loading && data ? __jsx(\"div\", {\n    style: {\n      display: \"inline-block\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, source.map(function (attribute) {\n    return __jsx(Item, {\n      key: attribute.id,\n      attribute: attribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  })) : null;\n}","map":{"version":3,"sources":["/home/huy/apps/ecommerce/app/components/Attribute/listOne.js"],"names":["gql","useQuery","Item","Fragment","useRouter","Link","queryVar","page","Spinner","Alert","getErrorMessage","Loading","GET_ATTRIBUTES","List","attributes","variables","seller","data","loading","error","source","allAttributes","display","map","attribute","id"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,QAAqB,oBAArB;AAEA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,YAA/B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,IAAMC,cAAc,GAAGZ,GAAH,mBAApB;AASA,OAAO,SAASa,IAAT,OAA8B;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBACFb,QAAQ,CAACW,cAAD,EAAiB;AACxDG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAET,IAAI,CAACS;AAAf;AAD6C,GAAjB,CADN;AAAA,MAC3BC,IAD2B,aAC3BA,IAD2B;AAAA,MACrBC,OADqB,aACrBA,OADqB;AAAA,MACZC,KADY,aACZA,KADY;;AAKnC,MAAID,OAAJ,EAAa,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAG,IAAA,KAAK,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBT,eAAe,CAACS,KAAD,CAAlC,CAAP;AAEX,MAAIC,MAAM,GAAGN,UAAU,GAAGA,UAAH,GAAgBG,IAAI,CAACI,aAA5C;AACA,SAAO,CAACH,OAAD,IAAYD,IAAZ,GACL;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,CAACG,GAAP,CAAW,UAACC,SAAD;AAAA,WACV,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,SAAS,CAACC,EAArB;AAAyB,MAAA,SAAS,EAAED,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADU;AAAA,GAAX,CADH,CADK,GAMH,IANJ;AAOD","sourcesContent":["// show in product detail\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Item } from \"./itemOne\";\nimport { Fragment } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Link } from \"../src/Link\";\nimport { queryVar } from \"../../apollo/action\";\nimport { page } from \"../../config/index\";\n\nimport { Spinner, Alert } from \"reactstrap\";\nimport { getErrorMessage } from \"../../lib/chip\";\nimport { Loading } from \"../src/Loading\";\nconst GET_ATTRIBUTES = gql`\n  query($seller: UserWhereInput) {\n    allAttributes(where: { seller: $seller }) {\n      id\n      name\n      url\n    }\n  }\n`;\nexport function List({ attributes }) {\n  const { data, loading, error } = useQuery(GET_ATTRIBUTES, {\n    variables: { seller: page.seller },\n  });\n\n  if (loading) return <Loading />;\n  if (error) return <i color=\"danger\">{getErrorMessage(error)}</i>;\n\n  let source = attributes ? attributes : data.allAttributes;\n  return !loading && data ? (\n    <div style={{ display: \"inline-block\" }}>\n      {source.map((attribute) => (\n        <Item key={attribute.id} attribute={attribute} />\n      ))}\n    </div>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}
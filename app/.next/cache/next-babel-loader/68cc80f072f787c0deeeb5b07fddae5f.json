{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation(\\n    $cung: CungWhereUniqueInput\\n    $cungVi: CungViWhereUniqueInput\\n    $chinhTinhs: [TinhWhereUniqueInput]\\n    $phuTinhs: [PhuTinhWhereUniqueInput]\\n  ) {\\n    createKetQua(\\n      data: {\\n        cung: { connect: $cung }\\n        cungVi: { connect: $cungVi }\\n        chinhTinh: { connect: $chinhTinhs, disconnectAll: true }\\n        phuTinh: { connect: $phuTinhs, disconnectAll: true }\\n      }\\n    ) {\\n      id\\n      cung {\\n        name\\n      }\\n      loiGiais: ketQua {\\n        id\\n        cung {\\n          name\\n        }\\n        chinhTinh {\\n          id\\n          name\\n        }\\n        phuTinh {\\n          id\\n          name\\n        }\\n        giai\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport Cung from \"./cung\";\nimport CungVi from \"./cungVi\";\nimport AllChinhTinhs from \"./chinhTinhs\";\nimport AllPhuTinhs from \"./phuTinhs\";\nimport { layCung } from \"../lib/laSoAdapter\";\nimport { getErrorMessage } from \"../lib/form\";\nvar createKetQuaMutation = gql(_templateObject());\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      padding: theme.spacing(1),\n      marginBottom: theme.spacing(2)\n    }\n  };\n});\n\nvar createKetQuas = function createKetQuas(_ref) {\n  var laSoTuVi = _ref.laSoTuVi,\n      onCreate = _ref.onCreate;\n\n  var _useMutation = useMutation(createKetQuaMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createKetQua = _useMutation2[0];\n\n  var router = useRouter(); //\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // alert\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      alertOpen = _React$useState2[0],\n      setAlertOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      alertMessage = _React$useState4[0],\n      setAlertMessage = _React$useState4[1]; // autocomplete\n\n\n  var _useState2 = useState(true),\n      autocomplete = _useState2[0],\n      setAuto = _useState2[1];\n\n  var _useState3 = useState(false),\n      autoEnable = _useState3[0],\n      setAutoEnable = _useState3[1]; // autocomplete = true data from \"laSoTuVi\"\n\n\n  var _useState4 = useState(),\n      DX = _useState4[0],\n      setDX = _useState4[1];\n\n  var _useState5 = useState(),\n      T1 = _useState5[0],\n      setT1 = _useState5[1];\n\n  var _useState6 = useState(),\n      T2 = _useState6[0],\n      setT2 = _useState6[1];\n\n  var _useState7 = useState(),\n      XC = _useState7[0],\n      setXC = _useState7[1]; // // autocomplete = false data from child state\n\n\n  var _useState8 = useState(),\n      C = _useState8[0],\n      setC = _useState8[1];\n\n  var _useState9 = useState(),\n      CV = _useState9[0],\n      setCV = _useState9[1];\n\n  var _useState10 = useState([]),\n      CT = _useState10[0],\n      setCT = _useState10[1];\n\n  var _useState11 = useState([]),\n      PT = _useState11[0],\n      setPT = _useState11[1];\n\n  var _useState12 = useState([]),\n      PTT1 = _useState12[0],\n      setPTT1 = _useState12[1];\n\n  var _useState13 = useState([]),\n      PTT2 = _useState13[0],\n      setPTT2 = _useState13[1];\n\n  var _useState14 = useState([]),\n      PTXC = _useState14[0],\n      setPTXC = _useState14[1];\n\n  useEffect(function () {\n    setAutoEnable(Boolean(laSoTuVi));\n  });\n\n  function handleCungChange(cung) {\n    setC(cung);\n\n    if (cung && laSoTuVi && autocomplete) {\n      var _layCung = layCung({\n        cung: cung,\n        thapNhiCung: laSoTuVi.thapNhiCung\n      }),\n          _DX = _layCung.DX,\n          _T = _layCung.T1,\n          _T2 = _layCung.T2,\n          _XC = _layCung.XC;\n\n      setDX(_DX);\n      setT1(_T);\n      setT2(_T2);\n      setXC(_XC);\n    }\n  }\n\n  function handleChangeCheckBox(event) {\n    setAuto(event.target.checked);\n  }\n\n  function handleSubmit() {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var variables, _ref2, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              variables = {\n                cung: {\n                  id: C === null || C === void 0 ? void 0 : C.id\n                },\n                cungVi: {\n                  id: CV === null || CV === void 0 ? void 0 : CV.id\n                },\n                chinhTinhs: WhereUniqueInput(CT),\n                phuTinhs: WhereUniqueInput(PT.concat(PTT1).concat(PTT2).concat(PTXC))\n              };\n              _context.prev = 2;\n              _context.next = 5;\n              return createKetQua({\n                variables: variables\n              });\n\n            case 5:\n              _ref2 = _context.sent;\n              data = _ref2.data;\n              onCreate(data === null || data === void 0 ? void 0 : data.createKetQua);\n              setLoading(false);\n              _context.next = 18;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](2);\n              setAlertMessage(getErrorMessage(_context.t0));\n              setAlertOpen(true);\n              setLoading(false);\n              _context.next = 18;\n              return router.push(\"/\");\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 11]]);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  var alertClose = function alertClose(event, reason) {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setAlertOpen(false);\n  };\n\n  var classes = useStyles();\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Cung, {\n    onChange: handleCungChange\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(CungVi, {\n    cung: autocomplete ? DX : false,\n    setCung: setDX,\n    CV: CV,\n    setCV: setCV\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllChinhTinhs, {\n    cung: autocomplete ? DX : false,\n    setCung: setDX,\n    CT: CT,\n    setCT: setCT\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    cung: DX,\n    setCung: setDX,\n    PT: PT,\n    setPT: setPT\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    label: T1 ? \"Tam hợp \" + T1.cungChu : false,\n    cung: autocomplete ? T1 : false,\n    setCung: setT1,\n    PT: PTT1,\n    setPT: setPTT1\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    label: T2 ? \"Tam hợp \" + T2.cungChu : false,\n    cung: autocomplete ? T2 : false,\n    setCung: setT2,\n    PT: PTT2,\n    setPT: setPTT2\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(AllPhuTinhs, {\n    label: XC ? \"Xung chiếu \" + XC.cungChu : false,\n    cung: autocomplete ? XC : false,\n    setCung: setXC,\n    PT: PTXC,\n    setPT: setPTXC\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      disabled: !autoEnable,\n      checked: autocomplete,\n      onChange: handleChangeCheckBox,\n      name: \"checkedB\",\n      color: \"primary\"\n    }),\n    label: \"T\\u1EF1 \\u0111\\u1ED9ng \\u0111i\\u1EC1n t\\u1EEB l\\xE1 s\\xF4?\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleSubmit\n  }, loading ? __jsx(React.Fragment, null, __jsx(CircularProgress, {\n    size: 24.5,\n    color: \"secondary\",\n    style: {\n      marginRight: 15\n    }\n  }), \" \", \"Vui l\\xF2ng \\u0111\\u1EE3i\") : \"Xem Kết Quả\"))), __jsx(Snackbar, {\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: alertOpen,\n    onClose: alertClose,\n    autoHideDuration: 3000,\n    message: alertMessage\n  }));\n};\n\nexport default createKetQuas;\n\nfunction WhereUniqueInput(array) {\n  if (!array) return [];\n  var result = [];\n  array.map(function (item) {\n    return result.push({\n      id: item.id\n    });\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport LabelIcon from \"@material-ui/icons/Label\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nconst query = gql`\n  query {\n    allKetQuas(orderBy: \"time_DESC\", first: 12) {\n      id\n      cung {\n        name\n      }\n      loiGiais: ketQua {\n        id\n        cung {\n          name\n        }\n        chinhTinh {\n          id\n          name\n        }\n        phuTinh {\n          id\n          name\n        }\n        giai\n      }\n    }\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(1),\n    marginBottom: theme.spacing(2)\n  },\n  box: {\n    backgroundColor: \"transparent\",\n    border: 1,\n    borderColor: \"rgba(0, 0, 0, 0.3)\",\n    borderStyle: \"solid\",\n    borderRadius: 8,\n    padding: 16\n  },\n  cung: {\n    fontWeight: \"bold\",\n    color: \"#dab857\"\n  }\n}));\nexport default function ketQuas() {\n  const classes = useStyles();\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(query);\n  return (data === null || data === void 0 ? void 0 : data.allKetQuas) && !loading ? __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, data.allKetQuas.map(ketQua => {\n    return __jsx(Grid, {\n      key: ketQua.id,\n      item: true,\n      xs: 12\n    }, __jsx(Box, {\n      className: classes.box\n    }, __jsx(List, null, __jsx(ListItem, null, __jsx(ListItemIcon, null, __jsx(LabelIcon, null)), __jsx(ListItemText, {\n      primary: __jsx(Typography, {\n        className: classes.cung //  color=\"primary\"\n        ,\n        variant: \"h6\"\n      }, `Cung ${ketQua.cung.name}`)\n    }))), ketQua.loiGiais.map(loiGiai => {\n      let chinhTinhs = loiGiai.chinhTinh.map(tinh => tinh.name).toString();\n      let phuTinhs = loiGiai.phuTinh.map(tinh => tinh.name).toString();\n      return __jsx(List, {\n        component: \"nav\",\n        key: loiGiai.id\n      }, chinhTinhs && phuTinhs ? __jsx(ListItem, null, __jsx(ListItemIcon, null, __jsx(StarIcon, null)), __jsx(ListItemText, {\n        primary: `Chính tinh ${chinhTinhs}. Phụ Tinh ${phuTinhs}`,\n        secondary: loiGiai.giai\n      })) : chinhTinhs ? __jsx(ListItem, null, __jsx(ListItemIcon, null, __jsx(StarIcon, null)), __jsx(ListItemText, {\n        primary: `Chính tinh ${chinhTinhs}`,\n        secondary: loiGiai.giai\n      })) : phuTinhs ? __jsx(ListItem, null, __jsx(ListItemIcon, null, __jsx(StarBorderIcon, null)), __jsx(ListItemText, {\n        primary: `Phụ tinh ${phuTinhs}. `,\n        secondary: loiGiai.giai\n      })) : null);\n    })));\n  }))) : __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"rect\",\n    height: \"60vh\"\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
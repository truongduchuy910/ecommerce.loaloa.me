{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/huy/apps/tuvilogic/app/components/cungVi.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    allCungVis {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layCungVi } from \"../lib/laSoAdapter\";\nvar query = gql(_templateObject());\nexport default function cungVi(_ref) {\n  _s();\n\n  var _this = this;\n\n  var cung = _ref.cung,\n      setCung = _ref.setCung,\n      CV = _ref.CV,\n      setCV = _ref.setCV;\n\n  var _useQuery = useQuery(query),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  console.log(CV);\n  var shouldRedirect = !(loading || data);\n  var router = useRouter();\n  useEffect(function () {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n  }, [shouldRedirect]);\n\n  if ((data === null || data === void 0 ? void 0 : data.allCungVis) && cung) {\n    setCV(layCungVi({\n      cung: cung,\n      allCungVis: data.allCungVis\n    }).CV);\n    setCung(false);\n  }\n\n  return (data === null || data === void 0 ? void 0 : data.allCungVis) && !loading ? __jsx(Autocomplete, {\n    value: CV,\n    onChange: function onChange(event, value) {\n      setCV(value);\n    },\n    size: \"small\",\n    options: data === null || data === void 0 ? void 0 : data.allCungVis,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    filterSelectedOptions: true,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        variant: \"outlined\",\n        label: \"Cung V\\u1ECB\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }) : __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(cungVi, \"caLi/pdIQ6wCEstSJ2CR364kXy4=\", false, function () {\n  return [useQuery, useRouter];\n});","map":{"version":3,"sources":["/home/huy/apps/tuvilogic/app/components/cungVi.js"],"names":["TextField","Autocomplete","Skeleton","useState","useEffect","useRouter","gql","useQuery","layCungVi","query","cungVi","cung","setCung","CV","setCV","data","loading","error","console","log","shouldRedirect","router","push","allCungVis","event","value","option","name","params"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,IAAMC,KAAK,GAAGH,GAAH,mBAAX;AAQA,eAAe,SAASI,MAAT,OAA8C;AAAA;;AAAA;;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAtBC,OAAsB,QAAtBA,OAAsB;AAAA,MAAbC,EAAa,QAAbA,EAAa;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,kBAC1BP,QAAQ,CAACE,KAAD,CADkB;AAAA,MACnDM,IADmD,aACnDA,IADmD;AAAA,MAC7CC,OAD6C,aAC7CA,OAD6C;AAAA,MACpCC,KADoC,aACpCA,KADoC;;AAE3DC,EAAAA,OAAO,CAACC,GAAR,CAAYN,EAAZ;AACA,MAAMO,cAAc,GAAG,EAAEJ,OAAO,IAAID,IAAb,CAAvB;AACA,MAAMM,MAAM,GAAGhB,SAAS,EAAxB;AACAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,cAAJ,EAAoB;AAClBC,MAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ;AACD;AACF,GAJQ,EAIN,CAACF,cAAD,CAJM,CAAT;;AAKA,MAAI,CAAAL,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEQ,UAAN,KAAoBZ,IAAxB,EAA8B;AAC5BG,IAAAA,KAAK,CAACN,SAAS,CAAC;AAAEG,MAAAA,IAAI,EAAJA,IAAF;AAAQY,MAAAA,UAAU,EAAER,IAAI,CAACQ;AAAzB,KAAD,CAAT,CAAiDV,EAAlD,CAAL;AACAD,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD;;AACD,SAAO,CAAAG,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEQ,UAAN,KAAoB,CAACP,OAArB,GACL,MAAC,YAAD;AACE,IAAA,KAAK,EAAEH,EADT;AAEE,IAAA,QAAQ,EAAE,kBAACW,KAAD,EAAQC,KAAR,EAAkB;AAC1BX,MAAAA,KAAK,CAACW,KAAD,CAAL;AACD,KAJH;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,OAAO,EAAEV,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEQ,UANjB;AAOE,IAAA,cAAc,EAAE,wBAACG,MAAD,EAAY;AAC1B,aAAOA,MAAM,CAACC,IAAd;AACD,KATH;AAUE,IAAA,qBAAqB,MAVvB;AAWE,IAAA,WAAW,EAAE,qBAACC,MAAD;AAAA,aACX,MAAC,SAAD,eAAeA,MAAf;AAAuB,QAAA,OAAO,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAC,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADW;AAAA,KAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAiBL,MAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,MAAM,EAAE,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF;AAmBD;;GAjCuBlB,M;UACWH,Q,EAGlBF,S","sourcesContent":["import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layCungVi } from \"../lib/laSoAdapter\";\nconst query = gql`\n  query {\n    allCungVis {\n      id\n      name\n    }\n  }\n`;\nexport default function cungVi({ cung, setCung, CV, setCV }) {\n  const { data, loading, error } = useQuery(query);\n  console.log(CV);\n  const shouldRedirect = !(loading || data);\n  const router = useRouter();\n  useEffect(() => {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n  }, [shouldRedirect]);\n  if (data?.allCungVis && cung) {\n    setCV(layCungVi({ cung, allCungVis: data.allCungVis }).CV);\n    setCung(false);\n  }\n  return data?.allCungVis && !loading ? (\n    <Autocomplete\n      value={CV}\n      onChange={(event, value) => {\n        setCV(value);\n      }}\n      size=\"small\"\n      options={data?.allCungVis}\n      getOptionLabel={(option) => {\n        return option.name;\n      }}\n      filterSelectedOptions\n      renderInput={(params) => (\n        <TextField {...params} variant=\"outlined\" label=\"Cung Vá»‹\" />\n      )}\n    />\n  ) : (\n    <Skeleton variant=\"rect\" height={40} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
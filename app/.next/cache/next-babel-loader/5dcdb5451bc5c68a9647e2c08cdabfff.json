{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/huy/apps/tuvilogic/app/components/chinhTinhs.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    allChinhTinhs: allTinhs {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layChinhTinhs } from \"../lib/laSoAdapter\";\nvar query = gql(_templateObject());\nexport default function chinhTinhs(_ref) {\n  _s();\n\n  var _this = this;\n\n  var cung = _ref.cung,\n      autocomplete = _ref.autocomplete,\n      _onChange = _ref.onChange;\n\n  var _useState = useState({}),\n      CT = _useState[0],\n      setCT = _useState[1];\n\n  var _useQuery = useQuery(query),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var shouldRedirect = !(loading || data);\n  var router = useRouter();\n  useEffect(function () {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.allChinhTinhs) && cung && autocomplete) {\n      setCT(layChinhTinhs({\n        allChinhTinhs: data.allChinhTinhs,\n        cung: cung\n      }).CT);\n    }\n  }, [shouldRedirect]);\n  return (data === null || data === void 0 ? void 0 : data.allChinhTinhs) && !loading ? __jsx(Autocomplete, {\n    value: CT || {},\n    onChange: function onChange(event, value) {\n      return _onChange(value);\n    },\n    multiple: true,\n    size: \"small\",\n    options: data.allChinhTinhs,\n    getOptionLabel: function getOptionLabel(option) {\n      if (option) return option.name;\n    },\n    filterSelectedOptions: true,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        variant: \"outlined\",\n        label: \"Ch\\xEDnh Tinh\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }) : __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(chinhTinhs, \"f+J6uezv6XB7fRHEG1s/05NK9Ww=\", false, function () {\n  return [useQuery, useRouter];\n});","map":{"version":3,"sources":["/home/huy/apps/tuvilogic/app/components/chinhTinhs.js"],"names":["TextField","Autocomplete","Skeleton","useState","useEffect","useRouter","gql","useQuery","layChinhTinhs","query","chinhTinhs","cung","autocomplete","onChange","CT","setCT","data","loading","error","shouldRedirect","router","push","allChinhTinhs","event","value","option","name","params"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,IAAMC,KAAK,GAAGH,GAAH,mBAAX;AAQA,eAAe,SAASI,UAAT,OAAsD;AAAA;;AAAA;;AAAA,MAAhCC,IAAgC,QAAhCA,IAAgC;AAAA,MAA1BC,YAA0B,QAA1BA,YAA0B;AAAA,MAAZC,SAAY,QAAZA,QAAY;;AAAA,kBAC/CV,QAAQ,CAAC,EAAD,CADuC;AAAA,MAC5DW,EAD4D;AAAA,MACxDC,KADwD;;AAAA,kBAElCR,QAAQ,CAACE,KAAD,CAF0B;AAAA,MAE3DO,IAF2D,aAE3DA,IAF2D;AAAA,MAErDC,OAFqD,aAErDA,OAFqD;AAAA,MAE5CC,KAF4C,aAE5CA,KAF4C;;AAInE,MAAMC,cAAc,GAAG,EAAEF,OAAO,IAAID,IAAb,CAAvB;AACA,MAAMI,MAAM,GAAGf,SAAS,EAAxB;AACAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIe,cAAJ,EAAoB;AAClBC,MAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ;AACD;;AACD,QAAI,CAAAL,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEM,aAAN,KAAuBX,IAAvB,IAA+BC,YAAnC,EAAiD;AAC/CG,MAAAA,KAAK,CAACP,aAAa,CAAC;AAAEc,QAAAA,aAAa,EAAEN,IAAI,CAACM,aAAtB;AAAqCX,QAAAA,IAAI,EAAJA;AAArC,OAAD,CAAb,CAA2DG,EAA5D,CAAL;AACD;AACF,GAPQ,EAON,CAACK,cAAD,CAPM,CAAT;AASA,SAAO,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEM,aAAN,KAAuB,CAACL,OAAxB,GACL,MAAC,YAAD;AACE,IAAA,KAAK,EAAEH,EAAE,IAAI,EADf;AAEE,IAAA,QAAQ,EAAE,kBAACS,KAAD,EAAQC,KAAR;AAAA,aAAkBX,SAAQ,CAACW,KAAD,CAA1B;AAAA,KAFZ;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,OAAO,EAAER,IAAI,CAACM,aALhB;AAME,IAAA,cAAc,EAAE,wBAACG,MAAD,EAAY;AAC1B,UAAIA,MAAJ,EAAY,OAAOA,MAAM,CAACC,IAAd;AACb,KARH;AASE,IAAA,qBAAqB,MATvB;AAUE,IAAA,WAAW,EAAE,qBAACC,MAAD;AAAA,aACX,MAAC,SAAD,eAAeA,MAAf;AAAuB,QAAA,OAAO,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAC,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADW;AAAA,KAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAgBL,MAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,MAAM,EAAE,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF;AAkBD;;GAjCuBjB,U;UAEWH,Q,EAGlBF,S","sourcesContent":["import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layChinhTinhs } from \"../lib/laSoAdapter\";\nconst query = gql`\n  query {\n    allChinhTinhs: allTinhs {\n      id\n      name\n    }\n  }\n`;\nexport default function chinhTinhs({ cung, autocomplete, onChange }) {\n  const [CT, setCT] = useState({});\n  const { data, loading, error } = useQuery(query);\n\n  const shouldRedirect = !(loading || data);\n  const router = useRouter();\n  useEffect(() => {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n    if (data?.allChinhTinhs && cung && autocomplete) {\n      setCT(layChinhTinhs({ allChinhTinhs: data.allChinhTinhs, cung }).CT);\n    }\n  }, [shouldRedirect]);\n\n  return data?.allChinhTinhs && !loading ? (\n    <Autocomplete\n      value={CT || {}}\n      onChange={(event, value) => onChange(value)}\n      multiple\n      size=\"small\"\n      options={data.allChinhTinhs}\n      getOptionLabel={(option) => {\n        if (option) return option.name;\n      }}\n      filterSelectedOptions\n      renderInput={(params) => (\n        <TextField {...params} variant=\"outlined\" label=\"ChÃ­nh Tinh\" />\n      )}\n    />\n  ) : (\n    <Skeleton variant=\"rect\" height={40} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
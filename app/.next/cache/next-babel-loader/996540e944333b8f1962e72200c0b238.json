{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/huy/apps/tuvilogic/app/components/ketQuas.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($limit: Int, $skip: Int) {\\n    allKetQuas(orderBy: \\\"time_DESC\\\", first: $limit, skip: $skip) {\\n      id\\n      cung {\\n        id\\n        name\\n      }\\n      loiGiais: ketQua {\\n        id\\n        cung {\\n          name\\n        }\\n        chinhTinh {\\n          id\\n          name\\n        }\\n        phuTinh {\\n          id\\n          name\\n        }\\n        giai\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { useState, useEffect } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport LoiGiais from \"./loiGiais\";\nvar query = gql(_templateObject());\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      padding: theme.spacing(1),\n      marginBottom: theme.spacing(2)\n    },\n    button: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      marginRight: \"auto\",\n      marginLeft: \"auto\",\n      maxWidth: 350\n    }\n  };\n});\nexport default function ketQuas(_ref) {\n  _s();\n\n  var _this = this;\n\n  var newKetQua = _ref.newKetQua,\n      reload = _ref.reload,\n      setReload = _ref.setReload;\n  var classes = useStyles();\n\n  var _useState = useState(true),\n      moreResult = _useState[0],\n      setMore = _useState[1];\n\n  var _useQuery = useQuery(query, {\n    variables: {\n      limit: 1,\n      skip: 0\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore,\n      refetch = _useQuery.refetch;\n\n  var allKetQuas = data === null || data === void 0 ? void 0 : data.allKetQuas;\n\n  if (reload) {\n    console.log(reload);\n    setReload(false);\n    refetch();\n  }\n\n  function loadingMore() {\n    var skip = (data === null || data === void 0 ? void 0 : data.allKetQuas.length) + 1;\n    fetchMore({\n      variables: {\n        skip: skip\n      },\n      updateQuery: function updateQuery(prev, _ref2) {\n        var fetchMoreResult = _ref2.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          setMore(false);\n          return prev;\n        }\n\n        return Object.assign({}, prev, {\n          allKetQuas: [].concat(_toConsumableArray(prev.allKetQuas), _toConsumableArray(fetchMoreResult.allKetQuas))\n        });\n      }\n    });\n  }\n\n  return !loading ? __jsx(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, allKetQuas.length ? allKetQuas.map(function (ketQua) {\n    return __jsx(LoiGiais, {\n      ketQua: ketQua,\n      newKetQua: newKetQua,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  }) : __jsx(Typography, {\n    variant: \"body1\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Danh s\\xE1ch k\\u1EBFt qu\\u1EA3 tr\\u1ED7ng.\"), moreResult ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: loadingMore,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"Xem th\\xEAm\") : null)) : __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"rect\",\n    height: \"60vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(ketQuas, \"7xmTyPmVlO96ZNf64x35lZPii7k=\", false, function () {\n  return [useStyles, useQuery];\n});","map":{"version":3,"sources":["/home/huy/apps/tuvilogic/app/components/ketQuas.js"],"names":["Grid","Paper","makeStyles","Skeleton","Typography","Button","useState","useEffect","gql","useQuery","LoiGiais","query","useStyles","theme","root","padding","spacing","marginBottom","button","marginTop","marginRight","marginLeft","maxWidth","ketQuas","newKetQua","reload","setReload","classes","moreResult","setMore","variables","limit","skip","data","loading","error","fetchMore","refetch","allKetQuas","console","log","loadingMore","length","updateQuery","prev","fetchMoreResult","Object","assign","map","ketQua"],"mappings":"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","sourcesContent":["import Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { useState, useEffect } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport LoiGiais from \"./loiGiais\";\nconst query = gql`\n  query($limit: Int, $skip: Int) {\n    allKetQuas(orderBy: \"time_DESC\", first: $limit, skip: $skip) {\n      id\n      cung {\n        id\n        name\n      }\n      loiGiais: ketQua {\n        id\n        cung {\n          name\n        }\n        chinhTinh {\n          id\n          name\n        }\n        phuTinh {\n          id\n          name\n        }\n        giai\n      }\n    }\n  }\n`;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    marginBottom: theme.spacing(2),\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    maxWidth: 350,\n  },\n}));\nexport default function ketQuas({ newKetQua, reload, setReload }) {\n  const classes = useStyles();\n  const [moreResult, setMore] = useState(true);\n\n  let { data, loading, error, fetchMore, refetch } = useQuery(query, {\n    variables: { limit: 1, skip: 0 },\n  });\n  let allKetQuas = data?.allKetQuas;\n\n  if (reload) {\n    console.log(reload);\n    setReload(false);\n    refetch();\n  }\n\n  function loadingMore() {\n    let skip = data?.allKetQuas.length + 1;\n    fetchMore({\n      variables: {\n        skip,\n      },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          setMore(false);\n          return prev;\n        }\n        return Object.assign({}, prev, {\n          allKetQuas: [...prev.allKetQuas, ...fetchMoreResult.allKetQuas],\n        });\n      },\n    });\n  }\n  return !loading ? (\n    <Paper className={classes.root}>\n      <Grid container spacing={1}>\n        {allKetQuas.length ? (\n          allKetQuas.map((ketQua) => (\n            <LoiGiais ketQua={ketQua} newKetQua={newKetQua} />\n          ))\n        ) : (\n          <Typography variant=\"body1\" gutterBottom>\n            Danh sách kết quả trỗng.\n          </Typography>\n        )}\n        {moreResult ? (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            onClick={loadingMore}\n            className={classes.button}\n          >\n            Xem thêm\n          </Button>\n        ) : null}\n      </Grid>\n    </Paper>\n  ) : (\n    <Skeleton animation=\"wave\" variant=\"rect\" height=\"60vh\" />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nconst query = gql`\n  query {\n    allCungs {\n      id\n      name\n    }\n  }\n`;\nexport default function cung({\n  onChange\n}) {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(query);\n  const shouldRedirect = !(loading || data);\n  const router = useRouter();\n  useEffect(() => {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n  }, [shouldRedirect]);\n  return (data === null || data === void 0 ? void 0 : data.allCungs) && !loading ? __jsx(Autocomplete, {\n    onChange: (event, value) => {\n      if (onChange) onChange(value);\n    },\n    size: \"small\",\n    options: data.allCungs,\n    getOptionLabel: option => {\n      if (option) return option.name;\n    },\n    filterSelectedOptions: true,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      variant: \"outlined\",\n      label: \"Cung\"\n    }))\n  }) : __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 40\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
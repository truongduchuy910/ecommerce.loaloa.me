{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nlet apolloClient;\n\nfunction createApolloClient() {\n  const {\n    HttpLink\n  } = require(\"@apollo/client/link/http\");\n\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: \"/admin/api\",\n      credentials: \"same-origin\"\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/huy/apps/loaloa/app/apollo/client.js"],"names":["useMemo","ApolloClient","InMemoryCache","apolloClient","createApolloClient","HttpLink","require","ssrMode","link","uri","credentials","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AAEA,IAAIC,YAAJ;;AACA,SAASC,kBAAT,GAA8B;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAeC,OAAO,CAAC,0BAAD,CAA5B;;AACA,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIH,QAAJ,CAAa;AACjBI,MAAAA,GAAG,EAAE,YADY;AAEjBC,MAAAA,WAAW,EAAE;AAFI,KAAb,CAFgB;AAMtBC,IAAAA,KAAK,EAAE,IAAIT,aAAJ;AANe,GAAjB,CAAP;AAQD;;AAED,OAAO,SAASU,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGX,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIS,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,YAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACX,YAAL,EAAmBA,YAAY,GAAGW,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAGjB,OAAO,CAAC,MAAMY,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nlet apolloClient;\nfunction createApolloClient() {\n  const { HttpLink } = require(\"@apollo/client/link/http\");\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: \"/admin/api\",\n      credentials: \"same-origin\",\n    }),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/huy/apps/loaloa/app/components/products.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($limit: Int) {\\n    allProducts(first: $limit) {\\n      id\\n      image {\\n        publicUrl\\n      }\\n      images {\\n        file {\\n          publicUrl\\n        }\\n      }\\n      name\\n      price\\n      sale\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Grid, Typography, TableCell, TableHead, TableRow, TableBody, TableContainer, Table, makeStyles, Paper, TextField, InputAdornment } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport formatMoney from \"../lib/formatMoney\";\nimport { gql, useQuery } from \"@apollo/client\";\nvar query = gql(_templateObject());\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      padding: theme.spacing(2),\n      marginBottom: theme.spacing(2)\n    }\n  };\n});\nexport default function ProductItem() {\n  var classes = useStyles();\n\n  var _useQuery = useQuery(query, {\n    variables: {\n      limit: 6\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore,\n      refetch = _useQuery.refetch;\n\n  var allProducts = data === null || data === void 0 ? void 0 : data.allProducts;\n  console.log(allProducts);\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, (allProducts === null || allProducts === void 0 ? void 0 : allProducts.length) ? allProducts.map(function (product) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 6,\n      md: 4,\n      lg: 3,\n      xl: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      style: {\n        maxWidth: \"100%\",\n        maxHeight: 80\n      },\n      src: product.image ? product.image.publicUrl : product.images[0].file.publicUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), __jsx(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, product.name), __jsx(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, product.quantity), __jsx(Typography, {\n      variant: \"body1\",\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, formatMoney(product.price, 0)), __jsx(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"- \", formatMoney(product.sale, 0), \" \\u0111\"));\n  }) : null);\n}","map":{"version":3,"sources":["/home/huy/apps/loaloa/app/components/products.js"],"names":["Grid","Typography","TableCell","TableHead","TableRow","TableBody","TableContainer","Table","makeStyles","Paper","TextField","InputAdornment","SearchIcon","formatMoney","gql","useQuery","query","useStyles","theme","root","padding","spacing","marginBottom","ProductItem","classes","variables","limit","data","loading","error","fetchMore","refetch","allProducts","console","log","length","map","product","maxWidth","maxHeight","image","publicUrl","images","file","name","quantity","price","sale"],"mappings":"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","sourcesContent":["import {\n  Grid,\n  Typography,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableBody,\n  TableContainer,\n  Table,\n  makeStyles,\n  Paper,\n  TextField,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport formatMoney from \"../lib/formatMoney\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nconst query = gql`\n  query($limit: Int) {\n    allProducts(first: $limit) {\n      id\n      image {\n        publicUrl\n      }\n      images {\n        file {\n          publicUrl\n        }\n      }\n      name\n      price\n      sale\n    }\n  }\n`;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n}));\nexport default function ProductItem() {\n  const classes = useStyles();\n  let { data, loading, error, fetchMore, refetch } = useQuery(query, {\n    variables: { limit: 6 },\n  });\n  let allProducts = data?.allProducts;\n  console.log(allProducts);\n  return (\n    <Grid container spacing={1}>\n      {allProducts?.length\n        ? allProducts.map((product) => (\n            <Grid item xs={6} md={4} lg={3} xl={2}>\n              <img\n                style={{ maxWidth: \"100%\", maxHeight: 80 }}\n                src={\n                  product.image\n                    ? product.image.publicUrl\n                    : product.images[0].file.publicUrl\n                }\n              />\n              <Typography variant=\"body1\">{product.name}</Typography>\n              <Typography variant=\"body1\">{product.quantity}</Typography>\n              <Typography variant=\"body1\" align=\"right\">\n                {formatMoney(product.price, 0)}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                - {formatMoney(product.sale, 0)} Ä‘\n              </Typography>\n            </Grid>\n          ))\n        : null}\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
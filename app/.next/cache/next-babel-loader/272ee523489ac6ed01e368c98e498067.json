{"ast":null,"code":"var _jsxFileName = \"/home/huy/apps/ecommerce/app/components/Cart/quickCart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, Fragment, useReducer } from \"react\";\nimport { Create as CreateCustomer } from \"../Customer/create\";\nimport { CREATE_ORDER_ITEMS, CREATE_ORDER, CART, OrderItemsCreateInputs, order } from \".\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { Loading } from \"../src/Loading\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/index\";\nexport const QuickCart = ({\n  cartItems\n}) => {\n  const router = useRouter(); // query\n\n  const {\n    data: cartData,\n    loading,\n    error\n  } = useQuery(CART); // mutation\n\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n  if (loading || error || !cartData) return __jsx(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  });\n  const {\n    customer,\n    user\n  } = cartData;\n  let sum = 0;\n  cartItems === null || cartItems === void 0 ? void 0 : cartItems.map(cartItem => {\n    sum += cartItem.price;\n  }); // create OrderItemsCreateInputs (GraphQL type)\n\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI === null || dataOICI === void 0 ? void 0 : dataOICI.map(data => data.data.ofSeller = {\n    connect: {\n      id: page.seller.id\n    }\n  }); // function\n\n  return __jsx(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, (cartItems === null || cartItems === void 0 ? void 0 : cartItems.length) ? __jsx(CreateCustomer, {\n    onCreate: ({\n      customer\n    }) => {\n      order({\n        createOrderItems,\n        createOrder,\n        dataOICI,\n        page,\n        customer,\n        sum,\n        router\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }) : null);\n};","map":{"version":3,"sources":["/home/huy/apps/ecommerce/app/components/Cart/quickCart.js"],"names":["useState","Fragment","useReducer","Create","CreateCustomer","CREATE_ORDER_ITEMS","CREATE_ORDER","CART","OrderItemsCreateInputs","order","useMutation","useQuery","Loading","useRouter","page","QuickCart","cartItems","router","data","cartData","loading","error","createOrderItems","createOrder","customer","user","sum","map","cartItem","price","dataOICI","ofSeller","connect","id","seller","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA+C,OAA/C;AAEA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,oBAAzC;AACA,SACEC,kBADF,EAEEC,YAFF,EAGEC,IAHF,EAIEC,sBAJF,EAKEC,KALF,QAMO,GANP;AAOA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC1C,QAAMC,MAAM,GAAGJ,SAAS,EAAxB,CAD0C,CAE1C;;AACA,QAAM;AAAEK,IAAAA,IAAI,EAAEC,QAAR;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA;AAA3B,MAAqCV,QAAQ,CAACJ,IAAD,CAAnD,CAH0C,CAI1C;;AACA,QAAM,CAACe,gBAAD,IAAqBZ,WAAW,CAACL,kBAAD,CAAtC;AACA,QAAM,CAACkB,WAAD,IAAgBb,WAAW,CAACJ,YAAD,CAAjC;AAEA,MAAIc,OAAO,IAAIC,KAAX,IAAoB,CAACF,QAAzB,EAAmC,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEnC,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAqBN,QAA3B;AACA,MAAIO,GAAG,GAAG,CAAV;AACAV,EAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEW,GAAX,CAAgBC,QAAD,IAAc;AAC3BF,IAAAA,GAAG,IAAIE,QAAQ,CAACC,KAAhB;AACD,GAFD,EAZ0C,CAgB1C;;AACA,MAAIC,QAAQ,GAAGtB,sBAAsB,CAACQ,SAAD,CAArC;AACAc,EAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,GAAV,CACGT,IAAD,IAAWA,IAAI,CAACA,IAAL,CAAUa,QAAV,GAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,EAAE,EAAEnB,IAAI,CAACoB,MAAL,CAAYD;AAAlB;AAAX,GADlC,EAlB0C,CAsB1C;;AACA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAAjB,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEmB,MAAX,IACC,MAAC,cAAD;AACE,IAAA,QAAQ,EAAE,CAAC;AAAEX,MAAAA;AAAF,KAAD,KAAkB;AAC1Bf,MAAAA,KAAK,CAAC;AACJa,QAAAA,gBADI;AAEJC,QAAAA,WAFI;AAGJO,QAAAA,QAHI;AAIJhB,QAAAA,IAJI;AAKJU,QAAAA,QALI;AAMJE,QAAAA,GANI;AAOJT,QAAAA;AAPI,OAAD,CAAL;AASD,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAcG,IAfN,CADF;AAmBD,CA1CM","sourcesContent":["import { useState, Fragment, useReducer } from \"react\";\n\nimport { Create as CreateCustomer } from \"../Customer/create\";\nimport {\n  CREATE_ORDER_ITEMS,\n  CREATE_ORDER,\n  CART,\n  OrderItemsCreateInputs,\n  order,\n} from \".\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { Loading } from \"../src/Loading\";\nimport { useRouter } from \"next/router\";\nimport { page } from \"../../config/index\";\nexport const QuickCart = ({ cartItems }) => {\n  const router = useRouter();\n  // query\n  const { data: cartData, loading, error } = useQuery(CART);\n  // mutation\n  const [createOrderItems] = useMutation(CREATE_ORDER_ITEMS);\n  const [createOrder] = useMutation(CREATE_ORDER);\n\n  if (loading || error || !cartData) return <Loading />;\n\n  const { customer, user } = cartData;\n  let sum = 0;\n  cartItems?.map((cartItem) => {\n    sum += cartItem.price;\n  });\n\n  // create OrderItemsCreateInputs (GraphQL type)\n  let dataOICI = OrderItemsCreateInputs(cartItems);\n  dataOICI?.map(\n    (data) => (data.data.ofSeller = { connect: { id: page.seller.id } })\n  );\n\n  // function\n  return (\n    <Fragment>\n      {cartItems?.length ? (\n        <CreateCustomer\n          onCreate={({ customer }) => {\n            order({\n              createOrderItems,\n              createOrder,\n              dataOICI,\n              page,\n              customer,\n              sum,\n              router,\n            });\n          }}\n        />\n      ) : null}\n    </Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
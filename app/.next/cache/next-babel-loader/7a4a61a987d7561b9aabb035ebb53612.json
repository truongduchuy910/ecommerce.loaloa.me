{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/huy/apps/tuvilogic/app/components/phuTinhs.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    allPhuTinhs {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layPhuTinhs } from \"../lib/laSoAdapter\";\nvar query = gql(_templateObject());\nexport default function phuTinhs(_ref) {\n  _s();\n\n  var _this = this;\n\n  var cung = _ref.cung,\n      label = _ref.label,\n      autocomplete = _ref.autocomplete;\n\n  var _useQuery = useQuery(query),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var shouldRedirect = !(loading || data);\n  var router = useRouter();\n  useEffect(function () {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n  }, [shouldRedirect]);\n  var PT;\n\n  if ((data === null || data === void 0 ? void 0 : data.allPhuTinhs) && cung && autocomplete) {\n    PT = layPhuTinhs({\n      allPhuTinhs: data.allPhuTinhs,\n      cung: cung\n    }).PT;\n  }\n\n  return (data === null || data === void 0 ? void 0 : data.allPhuTinhs) && !loading ? __jsx(Autocomplete, {\n    value: PT || {},\n    onChange: function (_onChange) {\n      function onChange(_x, _x2) {\n        return _onChange.apply(this, arguments);\n      }\n\n      onChange.toString = function () {\n        return _onChange.toString();\n      };\n\n      return onChange;\n    }(function (event, value) {\n      return onChange(value);\n    }),\n    multiple: true,\n    size: \"small\",\n    options: data.allPhuTinhs,\n    getOptionLabel: function getOptionLabel(option) {\n      return option ? option.name : {};\n    },\n    filterSelectedOptions: true,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        variant: \"outlined\",\n        label: label ? label : \"Phụ tinh\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }) : __jsx(Skeleton, {\n    variant: \"rect\",\n    height: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(phuTinhs, \"caLi/pdIQ6wCEstSJ2CR364kXy4=\", false, function () {\n  return [useQuery, useRouter];\n});","map":{"version":3,"sources":["/home/huy/apps/tuvilogic/app/components/phuTinhs.js"],"names":["TextField","Autocomplete","Skeleton","useState","useEffect","useRouter","gql","useQuery","layPhuTinhs","query","phuTinhs","cung","label","autocomplete","data","loading","error","shouldRedirect","router","push","PT","allPhuTinhs","event","value","onChange","option","name","params"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,IAAMC,KAAK,GAAGH,GAAH,mBAAX;AAQA,eAAe,SAASI,QAAT,OAAiD;AAAA;;AAAA;;AAAA,MAA7BC,IAA6B,QAA7BA,IAA6B;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;;AAAA,kBAC7BN,QAAQ,CAACE,KAAD,CADqB;AAAA,MACtDK,IADsD,aACtDA,IADsD;AAAA,MAChDC,OADgD,aAChDA,OADgD;AAAA,MACvCC,KADuC,aACvCA,KADuC;;AAG9D,MAAMC,cAAc,GAAG,EAAEF,OAAO,IAAID,IAAb,CAAvB;AACA,MAAMI,MAAM,GAAGb,SAAS,EAAxB;AACAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIa,cAAJ,EAAoB;AAClBC,MAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ;AACD;AACF,GAJQ,EAIN,CAACF,cAAD,CAJM,CAAT;AAKA,MAAIG,EAAJ;;AACA,MAAI,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEO,WAAN,KAAqBV,IAArB,IAA6BE,YAAjC,EAA+C;AAC7CO,IAAAA,EAAE,GAAGZ,WAAW,CAAC;AAAEa,MAAAA,WAAW,EAAEP,IAAI,CAACO,WAApB;AAAiCV,MAAAA,IAAI,EAAJA;AAAjC,KAAD,CAAX,CAAqDS,EAA1D;AACD;;AACD,SAAO,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEO,WAAN,KAAqB,CAACN,OAAtB,GACL,MAAC,YAAD;AACE,IAAA,KAAK,EAAEK,EAAE,IAAI,EADf;AAEE,IAAA,QAAQ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAE,UAACE,KAAD,EAAQC,KAAR;AAAA,aAAkBC,QAAQ,CAACD,KAAD,CAA1B;AAAA,KAAF,CAFV;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,OAAO,EAAET,IAAI,CAACO,WALhB;AAME,IAAA,cAAc,EAAE,wBAACI,MAAD,EAAY;AAC1B,aAAOA,MAAM,GAAGA,MAAM,CAACC,IAAV,GAAiB,EAA9B;AACD,KARH;AASE,IAAA,qBAAqB,MATvB;AAUE,IAAA,WAAW,EAAE,qBAACC,MAAD;AAAA,aACX,MAAC,SAAD,eACMA,MADN;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,KAAK,EAAEf,KAAK,GAAGA,KAAH,GAAW,UAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADW;AAAA,KAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAoBL,MAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,MAAM,EAAE,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF;AAsBD;;GApCuBF,Q;UACWH,Q,EAGlBF,S","sourcesContent":["import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { layPhuTinhs } from \"../lib/laSoAdapter\";\nconst query = gql`\n  query {\n    allPhuTinhs {\n      id\n      name\n    }\n  }\n`;\nexport default function phuTinhs({ cung, label, autocomplete }) {\n  const { data, loading, error } = useQuery(query);\n\n  const shouldRedirect = !(loading || data);\n  const router = useRouter();\n  useEffect(() => {\n    if (shouldRedirect) {\n      router.push(\"/signin\");\n    }\n  }, [shouldRedirect]);\n  let PT;\n  if (data?.allPhuTinhs && cung && autocomplete) {\n    PT = layPhuTinhs({ allPhuTinhs: data.allPhuTinhs, cung }).PT;\n  }\n  return data?.allPhuTinhs && !loading ? (\n    <Autocomplete\n      value={PT || {}}\n      onChange={(event, value) => onChange(value)}\n      multiple\n      size=\"small\"\n      options={data.allPhuTinhs}\n      getOptionLabel={(option) => {\n        return option ? option.name : {};\n      }}\n      filterSelectedOptions\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          variant=\"outlined\"\n          label={label ? label : \"Phụ tinh\"}\n        />\n      )}\n    />\n  ) : (\n    <Skeleton variant=\"rect\" height={40} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
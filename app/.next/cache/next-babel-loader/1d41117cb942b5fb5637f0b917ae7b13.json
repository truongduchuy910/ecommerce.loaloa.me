{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nlet apolloClient;\n\nfunction createApolloClient() {\n  const {\n    HttpLink\n  } = require(\"@apollo/client/link/http\");\n\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: \"http://localhost:8000/admin/api\",\n      credentials: \"same-origin\"\n    }),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}
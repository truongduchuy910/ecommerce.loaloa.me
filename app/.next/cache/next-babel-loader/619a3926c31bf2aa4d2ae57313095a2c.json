{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($limit: Int, $skip: Int) {\\n    allKetQuas(orderBy: \\\"time_DESC\\\", first: $limit, skip: $skip) {\\n      id\\n      cung {\\n        id\\n        name\\n      }\\n      loiGiais: ketQua {\\n        id\\n        cung {\\n          name\\n        }\\n        chinhTinh {\\n          id\\n          name\\n        }\\n        phuTinh {\\n          id\\n          name\\n        }\\n        giai\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { useState, useEffect } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport LoiGiais from \"./loiGiais\";\nvar query = gql(_templateObject());\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      padding: theme.spacing(1),\n      marginBottom: theme.spacing(2)\n    },\n    button: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      marginRight: \"auto\",\n      marginLeft: \"auto\",\n      maxWidth: 350\n    }\n  };\n});\nexport default function ketQuas(_ref) {\n  var newKetQua = _ref.newKetQua,\n      setNewKetQua = _ref.setNewKetQua;\n  var classes = useStyles();\n\n  var _useState = useState(true),\n      moreResult = _useState[0],\n      setMore = _useState[1];\n\n  var _useState2 = useState(),\n      newKQ = _useState2[0],\n      setNewKQ = _useState2[1];\n\n  var _useQuery = useQuery(query, {\n    variables: {\n      limit: 3,\n      skip: 0\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore,\n      refetch = _useQuery.refetch;\n\n  var allKetQuas = data === null || data === void 0 ? void 0 : data.allKetQuas;\n\n  if (newKetQua && !newKQ) {\n    setNewKQ(newKetQua);\n    setNewKetQua(false);\n    refetch();\n  }\n\n  function loadingMore() {\n    var count = data === null || data === void 0 ? void 0 : data.allKetQuas.length;\n    fetchMore({\n      variables: {\n        limit: 1,\n        skip: count\n      },\n      updateQuery: function updateQuery(prev, _ref2) {\n        var fetchMoreResult = _ref2.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          setMore(false);\n          return prev;\n        }\n\n        return Object.assign({}, prev, {\n          allKetQuas: [].concat(_toConsumableArray(prev.allKetQuas), _toConsumableArray(fetchMoreResult.allKetQuas))\n        });\n      }\n    });\n  }\n\n  return !loading ? __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, allKetQuas.length ? allKetQuas.map(function (ketQua) {\n    return __jsx(LoiGiais, {\n      ketQua: ketQua,\n      newKetQua: newKQ\n    });\n  }) : __jsx(Typography, {\n    variant: \"body1\",\n    gutterBottom: true\n  }, \"Danh s\\xE1ch k\\u1EBFt qu\\u1EA3 tr\\u1ED7ng.\"), moreResult && allKetQuas.length ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: loadingMore,\n    className: classes.button\n  }, \"Xem th\\xEAm\") : null)) : __jsx(Skeleton, {\n    animation: \"wave\",\n    variant: \"rect\",\n    height: \"60vh\"\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
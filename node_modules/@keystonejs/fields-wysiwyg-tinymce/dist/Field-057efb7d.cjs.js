'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral = _interopDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

require('tinymce/tinymce');

var tinymceReact = require('@tinymce/tinymce-react');

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n      .tox-tinymce {\n        border-radius: 5px !important;\n        border-color: #c1c7d0 !important;\n      }\n    "]);

  _templateObject = function () {
    return data;
  };

  return data;
}

const defaultOptions = {
  autoresize_bottom_margin: 20,
  base_url: '/tinymce-assets',
  branding: false,
  menubar: false,
  plugins: 'link lists code autoresize paste quickbars hr table emoticons image',
  statusbar: false,
  toolbar: 'formatselect forecolor | alignleft aligncenter alignright alignjustify | bullist numlist indent outdent | link unlink | image table emoticons hr | code',
  quickbars_selection_toolbar: 'bold italic underline strikethrough | h1 h2 h3 | quicklink blockquote removeformat',
  quickbars_insert_toolbar: false,
  width: '100%'
}; // Overrides some of the TinyMCE theme to better match the Admin UI style

const GlobalStyles = () => core.jsx(core.Global, {
  styles: core.css(_templateObject())
});

const WysiwygField = ({
  onChange,
  autoFocus,
  field,
  errors,
  value: serverValue
}) => {
  const handleChange = value => {
    if (typeof value === 'string') {
      onChange(value);
    }
  };

  const value = serverValue || '';
  const htmlID = "ks-input-".concat(field.path);
  const accessError = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
  if (accessError) return null;
  const overrideOptions = field.config.editorConfig;
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx("div", {
    css: {
      display: 'flex',
      flex: 1
    }
  }, core.jsx(GlobalStyles, null), core.jsx(tinymceReact.Editor, {
    init: _objectSpread({}, defaultOptions, {
      auto_focus: autoFocus
    }, overrideOptions),
    onEditorChange: handleChange,
    value: value
  })));
};

exports.default = WysiwygField;
